# -*- coding: utf-8 -*-
"""faceswapper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UOZjGnMos0dtJepCgAssk9U4AOgmbWqj
"""

!pip install -U insightface



!pip install onnxruntime

import cv2
import numpy as np
import matplotlib.pyplot as plt
import os
import glob


import insightface
from insightface.app import FaceAnalysis
from insightface.data import get_image as ins_get_image

app = FaceAnalysis(name='buffalo_l')
app.prepare(ctx_id = 0,det_size=(640,640))

xyz = '/content/fabian-centeno-AVywGKkAlD0-unsplash.jpg'
new = cv2.imread(xyz)

if new is not None:
    plt.imshow(new[:,:,::-1])  # Convert BGR to RGB
    plt.show()
else:
    print(f"Failed to load image '{xyz}'. Check the file path and format.")

# from google.colab import drive
# drive.mount('/content/drive')

img=new

#img = ins_get_image('t1')
plt.imshow(img[:,:,::-1])
plt.show()

faces = app.get(img)

faces

len(faces)

faces[0].keys()

fig, axs = plt.subplots (1, len(faces), figsize=(12, 5))
for i, face in enumerate(faces):
  bbox = face['bbox']
  bbox=[int (b) for b in bbox]
  axs[i].imshow(img [bbox [1]:bbox[3], bbox [0]: bbox [2],:: -1])
  axs[i].axis ('off')

!pip install deepface

!pip install mediapipe

from deepface import DeepFace

faces_list = []  # Initialize an empty list to store the cropped faces

# Create a figure with subplots for each face
fig, axs = plt.subplots(1, len(faces), figsize=(12, 5))

# Iterate through the faces
for i, face in enumerate(faces):
    bbox = face['bbox']  # Get the bounding box of the face
    bbox = [int(b) for b in bbox]  # Convert bounding box coordinates to integers

    # Crop the face from the original image
    cropped_face = img[bbox[1]:bbox[3], bbox[0]:bbox[2], ::-1]

    # Store the cropped face in the list
    faces_list.append(cropped_face)

    # Display the cropped face in the current subplot
    axs[i].imshow(cropped_face)
    axs[i].axis('off')  # Turn off axis labels for better visualization

# Now 'faces_list' contains all the individual cropped faces

fig, axs = plt.subplots(1, len(faces_list), figsize=(12, 5))

# Iterate through the faces in 'faces_list'
for i, face in enumerate(faces_list):
    axs[i].imshow(face)
    axs[i].axis('off')  # Turn off axis labels for better visualization

# Display all the stored faces
plt.show()

# backends = ["opencv", "ssd", "mtcnn", "retinaface", "mediapipe"]

# for i, face in enumerate(faces_list):
#    facce=DeepFace.extract_faces(face,target_size=(224, 224),detector_backend='opencv')

# for i in range(len(faces_list)):
#     faces_list[i] = faces_list[i].astype(np.uint8)

# print(f"Sample pixel values: {faces_list[0][0, 0]}")

# # Create subplots for each backend
# fig, axs = plt.subplots(2, 2, figsize=(15, 10))
# axs = axs.flatten()

# # Iterate through the faces in 'faces_list'
# for i, face in enumerate(faces_list):
#     print(face.dtype)
#     # Create a new set of subplots for each face
#     fig, axs = plt.subplots(2, 2, figsize=(15, 10))
#     axs = axs.flatten()

#     # Iterate through the backends
#     for j, backend in enumerate(backends):
#         try:
#             # Extract faces using the specified backend
#             extracted_faces = DeepFace.extract_faces(
#                 face, detector_backend=backend, enforce_detection=False
#             )

#             if len(extracted_faces) > 0:
#                 axs[j].imshow(extracted_faces[0])
#                 axs[j].set_title(backend)
#                 axs[j].axis('off')
#             else:
#                 axs[j].set_title(f"No face detected ({backend})")

#         except Exception as e:
#             print(f"Error with backend '{backend}': {str(e)}")

#     # Show the subplots for the current face
#     plt.show()

# for i in range(len(faces_list)):
#     faces_list[i] = faces_list[i].astype(np.float32)

# fig, axs = plt.subplots(len(backends), len(faces_list), figsize=(15, 10))

# # Iterate through the backends
# for i, backend in enumerate(backends):
#     # Iterate through the faces in 'faces_list'
#     for j, face in enumerate(faces_list):
#         print(face.dtype)
#         try:
#             # Extract faces using the specified backend
#             extracted_faces = DeepFace.extract_faces(
#                 face, detector_backend=backend, enforce_detection=False
#             )

#             if len(extracted_faces) > 0:
#                 axs[i, j].imshow(extracted_faces[0])
#                 axs[i, j].set_title(backend)
#                 axs[i, j].axis("off")
#             else:
#                 axs[i, j].set_title(f"No face detected ({backend})")

#         except Exception as e:
#             print(f"Error with backend '{backend}': {str(e)}")

# # Adjust subplot layout
# plt.tight_layout()

# # Show the subplots for all faces and backends
# plt.show()

from deepface import DeepFace

# Assuming you have a list of faces, 'faces_list', where each element is an image

# Create an empty list to store the results
results = []

# Iterate through the images in 'faces_list'
for img in faces_list:
    try:
        # Analyze the current image using DeepFace with enforce_detection=False
        result = DeepFace.analyze(img_path=img, enforce_detection=False)

        # Append the result to the 'results' list
        results.append(result)
       # print(results.dtype)

        # You can print or process the result as needed
        print(result)
    except Exception as e:
        # Handle any errors that may occur during analysis
        print(f"Error analyzing image: {str(e)}")

# Initialize variables to keep track of the maximum happiness score and its index
max_happiness_score = -1  # Initialize with a negative value
index_of_max_happiness_face = -1

# Iterate through the results
for i, result in enumerate(results):
    try:
        # Extract the happiness score from the result
        happiness_score = result[0]['emotion']['happy']

        # Check if the current happiness score is higher than the maximum
        if happiness_score > max_happiness_score:
            max_happiness_score = happiness_score
            index_of_max_happiness_face = i

    except Exception as e:
        # Handle any errors or missing data
        print(f"Error processing result {i}: {str(e)}")

# 'index_of_max_happiness_face' now contains the index of the face with the maximum happiness score
if index_of_max_happiness_face != -1:
    print(f"The face with the maximum happiness score is at index {index_of_max_happiness_face}")
else:
    print("No happiness scores found in the results")

fig, axs = plt.subplots(1, len(faces_list), figsize=(12, 5))

# Iterate through the faces in 'faces_list'
for i, face in enumerate(faces_list):
    axs[i].imshow(face)
    axs[i].axis('off')  # Turn off axis labels for better visualization

# Display all the stored faces
plt.show()

import gdown

# Define the Google Drive file ID from the shared link
file_id = '1krOLgjW2tAPaqV-Bw4YALz0xT5zlb5HF'

# Define the output file path where you want to save the downloaded file
output_file = 'inswapper_128.onnx'

# Construct the direct download link
download_link = f'https://drive.google.com/uc?id={file_id}'

# Use gdown to download the file
gdown.download(download_link, output_file, quiet=False)

swapper = insightface.model_zoo.get_model('inswapper_128.onnx')

source_face = faces[index_of_max_happiness_face]

res=new.copy()
for face in faces:
   res = swapper.get(res, face, source_face, paste_back=True)

plt.imshow(res[:,:,::-1])
plt.show()

plt.imshow(new[:,:,::-1])
plt.show()